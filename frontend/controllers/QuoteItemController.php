<?php
/**
 * Created by PhpStorm.
 * User: nhutdev
 * Date: 09/01/2017
 * Time: 12:20
 */

namespace frontend\controllers;


use backend\business\BusinessProduct;
use common\core\oop\ObjectScalar;
use frontend\business\BusinessQuoteItem;

class QuoteItemController extends BaseController
{
    /**
     * @var BusinessQuoteItem
     */
    private $business;

    /**
     * @var BusinessProduct
     */
    private $businessProduct;

    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function init()
    {
        $this->business = BusinessQuoteItem::getInstance();
        $this->businessProduct = BusinessProduct::getInstance();
        parent::init();
    }

    public function actionGetAllItem($id = null)
    {
        if ($id) {
            $this->setVars(['quoteItem' => $this->business->findAllItemByQuoteId($id)]);
        }

        $this->responseJson();

    }

    public function actionCreate()
    {
        $model = $this->businessProduct->newModel();

        $postObject = $this->getPostObject('Product');

        if (!$postObject->isEmpty()) {
            $createStatus = $this->businessProduct->create($model, $postObject);
            if (empty($createStatus->getErrors())) {
                if (!$postObject->is_product_color) {
                    $this->businessProduct->createProductColorForProuctNotColor($createStatus);
                }

                $this->setVars([
                    'insert' => true
                ]);
            } else {
                $this->setVars([
                    'insert' => $createStatus->getFirstErrorMessage()
                ]);
            }
        }


        $this->responseJson();

    }

    public function actionUpdateQtyQuoteItem()
    {

        $dataPost = $this->getPostObject();

        $model = $this->business->findModelQuoteItem($dataPost['quoteId'], $dataPost['productId'], $dataPost['selectedProductColorId']);

        $postObject = new ObjectScalar();
        $postObject['qty'] = $dataPost['qty'];

        if (!empty($postObject)) {

            $updateStatus = $this->business->update($model, $postObject);
            if ($updateStatus === true) {
                $this->setVars(['message' => 'Update sucessfully']);
            } else {
                $this->setVars(['error' => 'Update error']);
            }

        }

        $this->responseJson();
    }

    public function actionDeleteQuoteItem()
    {

        $dataPost = $this->getPostObject();

        $model = $this->business->findModelQuoteItem($dataPost['quoteId'], $dataPost['productId'], $dataPost['selectedProductColorId']);

        $deleteStatus = $this->business->delete($model);
        if ($deleteStatus === true) {
            $this->setVars(['message' => 'Delete sucessfully']);
        } else {
            $this->setVars(['error' => 'Delete error']);
        }

        $this->responseJson();

    }

}